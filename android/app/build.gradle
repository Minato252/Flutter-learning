def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}


apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 29

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        multiDexEnabled true
        ndk {
            abiFilters "x86","armeabi"
        }
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.weitong"
        // minSdkVersion 16
        // minSdkVersion 17
        minSdkVersion 19
        targetSdkVersion 29
        versionCode flutterVersionCode.toInteger()
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        versionName flutterVersionName
            // Fix: More than one file was found
    	packagingOptions {
        // pickFirst 'lib/x86/libavcodec.so'
        // pickFirst 'lib/x86/libswscale.so'
        // pickFirst 'lib/x86_64/libavutil.so'
        // pickFirst 'lib/x86_64/libavcodec.so'
        // pickFirst 'lib/x86_64/libswscale.so'
        // pickFirst 'lib/x86_64/libavformat.so'
        // pickFirst 'lib/arm64-v8a/libavcodec.so'
        // pickFirst 'lib/armeabi-v7a/libavutil.so'
        // pickFirst 'lib/arm64-v8a/libavformat.so'
        // pickFirst 'lib/x86/libavformat.so'
        // pickFirst 'lib/armeabi-v7a/libavformat.so'
        // pickFirst 'lib/armeabi-v7a/libavcodec.so'
        // pickFirst 'lib/armeabi-v7a/libswscale.so'
        // pickFirst 'lib/arm64-v8a/libavutil.so'
        // pickFirst 'lib/arm64-v8a/libswscale.so'
        pickFirst 'lib/x86/*.so'
        pickFirst 'lib/x86_64/*.so'
        pickFirst 'lib/arm64-v8a/*.so'
        pickFirst 'lib/armeabi-v7a/*.so'
        pickFirst 'lib/armeabi/*.so'




    }
    }

    buildTypes {
        debug {
<<<<<<< HEAD
            ndk{
                // abiFilters "armeabi","armeabi-v7a","arm64-v8a", "x86"
                abiFilters "x86","armeabi"
=======
            ndk {
                //这里要加上，否则debug包会出问题,后面三个为可选，x86建议加上不然部分模拟器回报错
                abiFilters "armeabi-v7a", "x86"
>>>>>>> 15cad5572fbc3d386bbaddf1cfc73ee22a263b6f
            }
        }
        release {
             ndk{
                abiFilters "armeabi-v7a"
            }
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro' 
            ndk {
                abiFilters "x86","armeabi"
                // abiFilters "armeabi"
            }
            
        }
    }



}

flutter {
    source '../..'
}

